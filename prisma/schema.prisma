// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "npx zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  clerkId               String                 @unique
  name                  String?
  email                 String                 @unique
  profileImage          String?
  tier                  String?                @default("Free")
  credits               String?                @default("10")
  localGoogleId         String?                @unique
  googleResourceId      String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Connections           Connection[]
  Workflows             Workflow[]
  LocalGoogleCredential LocalGoogleCredential?
  DiscordWebhook        DiscordWebhook[]
  Slack                 Slack[]
  Notion                Notion[]

  @@index([clerkId])
}

model Connection {
  id               String          @id @default(uuid())
  type             String          @unique
  User             User?           @relation(fields: [userId], references: [clerkId])
  userId           String?
  DiscordWebhook   DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  discordWebhookId String?
  Notion           Notion?         @relation(fields: [notionId], references: [id])
  notionId         String?
  Slack            Slack?          @relation(fields: [slackId], references: [id])
  slackId          String?

  @@index([type])
}

model DiscordWebhook {
  id         String       @id @default(uuid())
  webhookId  String       @unique
  url        String       @unique
  name       String
  guildName  String
  guildId    String
  channelId  String       @unique
  User       User         @relation(fields: [userId], references: [clerkId])
  userId     String
  Connection Connection[]

  @@index([webhookId])
}

model Slack {
  id               String       @id @default(uuid())
  appId            String
  authedUserId     String
  authedUserToken  String       @unique
  slackAccessToken String       @unique
  botUserId        String
  teamId           String
  teamName         String
  User             User         @relation(fields: [userId], references: [clerkId])
  userId           String
  Connection       Connection[]

  @@index([appId])
}

model Notion {
  id            String       @id @default(uuid())
  accessToken   String       @unique
  workspaceId   String       @unique
  databaseId    String       @unique
  workspaceName String
  workspaceIcon String
  User          User         @relation(fields: [userId], references: [clerkId])
  userId        String
  Connection    Connection[]

  @@index([workspaceId])
}

model Workflow {
  id                String   @id @default(uuid())
  nodes             String?
  edges             String?
  name              String
  discordTemplate   String?
  notionTemplate    String?
  slackTemplate     String?
  slackChannels     String[]
  slackAccessToken  String?
  notionAccessToken String?
  notionDbId        String?
  flowPath          String?
  cronPath          String?
  publish           Boolean? @default(false)
  description       String
  User              User     @relation(fields: [userId], references: [clerkId])
  userId            String

  @@index([name])
}

model LocalGoogleCredential {
  id          String  @id @default(uuid())
  accessToken String  @unique
  folderId    String?
  pageToken   String?
  channelId   String  @unique @default(uuid())
  subscribed  Boolean @default(false)
  User        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
